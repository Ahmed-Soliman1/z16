Line   Address   Machine Code    Source
-----------------------------------------------------
   1                          # Add some comments to describe the program
   2                          
   3                          # the TEXT Section
   4                              .text
   5   0x0000                      .org    0
   6   0x0000                  main:
   7   0x0000                      # Your code goes here
   8   0x0000                      # you can use the ABI register names
   9   0x0000                      # Also, you may end the line with a comment
  10   0x0000   64F9             li s0, 50      // s0 = 50
  11   0x0002   14C1             addi s0, 10    // s0 = s0 + 10 (s0 = 60)
  12   0x0004   07B8             mv a0, s0      
  13   0x0006   0047             ecall 1        // print 60
  14   0x0008                  
  15   0x0008   0B39             li s1, 5       
  16   0x000A   1509             slti s1,10    
  17   0x000C   09B8             mv a0, s1
  18   0x000E   0047             ecall 1        // print 1
  19   0x0010                  
  20   0x0010   F739             li s1, -5     
  21   0x0012   1511             sltiu s1,10   
  22   0x0014   09B8             mv a0, s1
  23   0x0016   0047             ecall 1        // print 0
  24   0x0018                  
  25   0x0018                  
  26   0x0018   06F9             li s0, 3       // s0 = 3
  27   0x001A   24D9             slli s0, 2     // s0 = s0 << 2 (s0 = 12)
  28   0x001C   07B8             mv a0, s0
  29   0x001E   0047             ecall 1        // print 12
  30   0x0020                  
  31   0x0020   20F9             li s0, 16      // s0 = 16
  32   0x0022   44D9             srli s0, 2     // s0 = s0 >> 2 (logical shift, s0 = 4)
  33   0x0024   07B8             mv a0, s0
  34   0x0026   0047             ecall 1        // print 4
  35   0x0028                  
  36   0x0028   E0F9             li s0, -16      // s0 = -16
  37   0x002A   44D9             srli s0, 2     // s0 = s0 >> 2 (logical shift, s0 = 4)
  38   0x002C   07B8             mv a0, s0
  39   0x002E   0047             ecall 1        // print 
  40   0x0030                  
  41   0x0030                  
  42   0x0030   E0F9             li s0, -16     // s0 = -16
  43   0x0032   84D9             srai s0, 2     // s0 = s0 >> 2 (arithmetic shift, preserves sign)
  44   0x0034   07B8             mv a0, s0
  45   0x0036   0047             ecall 1        // print -4
  46   0x0038                  
  47   0x0038   0839             li t0, 4       // t0 = 4 (0100)
  48   0x003A   0421             ori t0, 2      // t0 = t0 | 2 (t0 = 6)
  49   0x003C   01B8             mv a0, t0
  50   0x003E   0047             ecall 1        // print 6
  51   0x0040                  
  52   0x0040   0C39             li t0, 6       // t0 = 6 (0110)
  53   0x0042   0629             andi t0, 3     // t0 = t0 & 3 (t0 = 2)
  54   0x0044   01B8             mv a0, t0
  55   0x0046   0047             ecall 1        // print 2
  56   0x0048                  
  57   0x0048   0439             li t0, 2       // t0 = 2 (0010)
  58   0x004A   0831             xori t0, 4     // t0 = t0 ^ 3 (t0 = 1)
  59   0x004C   01B8             mv a0, t0
  60   0x004E   0047             ecall 1        // print 1
  61   0x0050                  
  62   0x0050   C8F9             li s0, 100     // s0 = 100
  63   0x0052   07B8             mv a0, s0
  64   0x0054   0047             ecall 1        // print 100
  65   0x0056                  
  66   0x0056                    
  67   0x0056   00C7             ecall 3 //EXIT
  68   0x0058                  
  69   0x0058                      .data
  70   0x0100                      .org 0x100
